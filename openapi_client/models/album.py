# coding: utf-8

"""
    OpenAPI3Definition 62

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.artist import Artist
from openapi_client.models.genres import Genres
from typing import Optional, Set
from typing_extensions import Self

class Album(BaseModel):
    """
    Album
    """ # noqa: E501
    id: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    upc: Optional[StrictStr] = None
    cover: Optional[StrictStr] = None
    cover_small: Optional[StrictStr] = None
    cover_medium: Optional[StrictStr] = None
    cover_big: Optional[StrictStr] = None
    cover_xl: Optional[StrictStr] = None
    md5_image: Optional[StrictStr] = None
    tracklist: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    genre_id: Optional[StrictInt] = None
    genres: Optional[Genres] = None
    label: Optional[StrictStr] = None
    nb_tracks: Optional[StrictInt] = None
    duration: Optional[StrictInt] = None
    fans: Optional[StrictInt] = None
    release_date: Optional[StrictStr] = None
    record_type: Optional[StrictStr] = None
    available: Optional[StrictBool] = None
    explicit_lyrics: Optional[StrictBool] = None
    explicit_content_lyrics: Optional[StrictInt] = None
    explicit_content_cover: Optional[StrictInt] = None
    contributors: Optional[List[Artist]] = None
    artist: Optional[Artist] = None
    tracks: Optional[Tracks] = None
    __properties: ClassVar[List[str]] = ["id", "title", "upc", "cover", "cover_small", "cover_medium", "cover_big", "cover_xl", "md5_image", "tracklist", "type", "genre_id", "genres", "label", "nb_tracks", "duration", "fans", "release_date", "record_type", "available", "explicit_lyrics", "explicit_content_lyrics", "explicit_content_cover", "contributors", "artist", "tracks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Album from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of genres
        if self.genres:
            _dict['genres'] = self.genres.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contributors (list)
        _items = []
        if self.contributors:
            for _item_contributors in self.contributors:
                if _item_contributors:
                    _items.append(_item_contributors.to_dict())
            _dict['contributors'] = _items
        # override the default output from pydantic by calling `to_dict()` of artist
        if self.artist:
            _dict['artist'] = self.artist.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tracks
        if self.tracks:
            _dict['tracks'] = self.tracks.to_dict()
        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if fans (nullable) is None
        # and model_fields_set contains the field
        if self.fans is None and "fans" in self.model_fields_set:
            _dict['fans'] = None

        # set to None if record_type (nullable) is None
        # and model_fields_set contains the field
        if self.record_type is None and "record_type" in self.model_fields_set:
            _dict['record_type'] = None

        # set to None if available (nullable) is None
        # and model_fields_set contains the field
        if self.available is None and "available" in self.model_fields_set:
            _dict['available'] = None

        # set to None if explicit_lyrics (nullable) is None
        # and model_fields_set contains the field
        if self.explicit_lyrics is None and "explicit_lyrics" in self.model_fields_set:
            _dict['explicit_lyrics'] = None

        # set to None if explicit_content_lyrics (nullable) is None
        # and model_fields_set contains the field
        if self.explicit_content_lyrics is None and "explicit_content_lyrics" in self.model_fields_set:
            _dict['explicit_content_lyrics'] = None

        # set to None if explicit_content_cover (nullable) is None
        # and model_fields_set contains the field
        if self.explicit_content_cover is None and "explicit_content_cover" in self.model_fields_set:
            _dict['explicit_content_cover'] = None

        # set to None if contributors (nullable) is None
        # and model_fields_set contains the field
        if self.contributors is None and "contributors" in self.model_fields_set:
            _dict['contributors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Album from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "upc": obj.get("upc"),
            "cover": obj.get("cover"),
            "cover_small": obj.get("cover_small"),
            "cover_medium": obj.get("cover_medium"),
            "cover_big": obj.get("cover_big"),
            "cover_xl": obj.get("cover_xl"),
            "md5_image": obj.get("md5_image"),
            "tracklist": obj.get("tracklist"),
            "type": obj.get("type"),
            "genre_id": obj.get("genre_id"),
            "genres": Genres.from_dict(obj["genres"]) if obj.get("genres") is not None else None,
            "label": obj.get("label"),
            "nb_tracks": obj.get("nb_tracks"),
            "duration": obj.get("duration"),
            "fans": obj.get("fans"),
            "release_date": obj.get("release_date"),
            "record_type": obj.get("record_type"),
            "available": obj.get("available"),
            "explicit_lyrics": obj.get("explicit_lyrics"),
            "explicit_content_lyrics": obj.get("explicit_content_lyrics"),
            "explicit_content_cover": obj.get("explicit_content_cover"),
            "contributors": [Artist.from_dict(_item) for _item in obj["contributors"]] if obj.get("contributors") is not None else None,
            "artist": Artist.from_dict(obj["artist"]) if obj.get("artist") is not None else None,
            "tracks": Tracks.from_dict(obj["tracks"]) if obj.get("tracks") is not None else None
        })
        return _obj

from openapi_client.models.tracks import Tracks
# TODO: Rewrite to not use raise_errors
Album.model_rebuild(raise_errors=False)

